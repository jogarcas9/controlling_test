/**
 * Script para verificar que la estructura del proyecto es correcta antes del despliegue
 * Ejecutar con: node verify-deploy.js
 */

const fs = require('fs');
const path = require('path');

// Archivos y carpetas cr√≠ticos que deben existir
const requiredFiles = [
  'server.js',
  'vercel.json',
  'package.json',
  'config/index.js',
  'config/mongodb.js',
  'middleware/auth.js',
  'routes/api/auth.js',
  'models/User.js'
];

// Verificar si todos los archivos existen
console.log('üîç Verificando estructura del proyecto para despliegue en Vercel...\n');

let allFilesExist = true;
let missingFiles = [];

requiredFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - Encontrado`);
  } else {
    console.log(`‚ùå ${file} - FALTA`);
    allFilesExist = false;
    missingFiles.push(file);
  }
});

// Verificar package.json
console.log('\nüì¶ Verificando package.json...');
try {
  const packageJson = require('./package.json');
  
  // Verificar main
  if (packageJson.main !== 'server.js') {
    console.log(`‚ö†Ô∏è El campo 'main' en package.json no apunta a server.js (actual: ${packageJson.main})`);
  } else {
    console.log('‚úÖ Campo "main" correcto en package.json');
  }
  
  // Verificar scripts
  if (!packageJson.scripts || !packageJson.scripts.start || !packageJson.scripts.start.includes('server.js')) {
    console.log('‚ö†Ô∏è No se encontr√≥ un script "start" que ejecute server.js');
  } else {
    console.log('‚úÖ Script "start" correcto en package.json');
  }
  
  // Verificar dependencias cr√≠ticas
  const criticalDeps = ['express', 'mongoose', 'socket.io', 'cors', 'jsonwebtoken'];
  const missingDeps = criticalDeps.filter(dep => !packageJson.dependencies || !packageJson.dependencies[dep]);
  
  if (missingDeps.length > 0) {
    console.log(`‚ö†Ô∏è Faltan dependencias cr√≠ticas: ${missingDeps.join(', ')}`);
  } else {
    console.log('‚úÖ Todas las dependencias cr√≠ticas est√°n presentes');
  }
  
} catch (error) {
  console.log('‚ùå Error al verificar package.json:', error.message);
  allFilesExist = false;
}

// Verificar vercel.json
console.log('\nüîß Verificando vercel.json...');
try {
  const vercelJson = require('./vercel.json');
  
  // Verificar builds
  if (!vercelJson.builds || !vercelJson.builds.length || !vercelJson.builds.some(b => b.src === 'server.js')) {
    console.log('‚ö†Ô∏è No se encontr√≥ configuraci√≥n de builds para server.js en vercel.json');
  } else {
    console.log('‚úÖ Configuraci√≥n de builds correcta');
  }
  
  // Verificar routes
  if (!vercelJson.routes || !vercelJson.routes.length) {
    console.log('‚ö†Ô∏è No se encontraron rutas configuradas en vercel.json');
  } else {
    console.log('‚úÖ Rutas configuradas en vercel.json');
  }
  
  // Verificar environment variables
  if (!vercelJson.env || !vercelJson.env.MONGODB_URI || !vercelJson.env.JWT_SECRET) {
    console.log('‚ö†Ô∏è Faltan variables de entorno cr√≠ticas en vercel.json');
  } else {
    console.log('‚úÖ Variables de entorno configuradas');
  }
  
} catch (error) {
  console.log('‚ùå Error al verificar vercel.json:', error.message);
  allFilesExist = false;
}

// Resumen final
console.log('\nüìã RESUMEN DE LA VERIFICACI√ìN:');
if (allFilesExist) {
  console.log('‚úÖ Todos los archivos cr√≠ticos est√°n presentes. La estructura es v√°lida para despliegue.');
} else {
  console.log('‚ùå ADVERTENCIA: Faltan archivos cr√≠ticos. El despliegue podr√≠a fallar.');
  console.log('   Archivos faltantes:');
  missingFiles.forEach(file => console.log(`   - ${file}`));
}

// Advertencia de que esto no garantiza que el despliegue funcione
console.log('\n‚ö†Ô∏è NOTA: Esta verificaci√≥n no garantiza que el despliegue funcione correctamente.');
console.log('   Aseg√∫rate de verificar la configuraci√≥n espec√≠fica de cada archivo.');

// Sugerencias para resolver problemas comunes
console.log('\nüîß PASOS PARA RESOLVER PROBLEMAS COMUNES DE DESPLIEGUE:');
console.log('1. Aseg√∫rate de que el campo "main" en package.json apunte a server.js');
console.log('2. En vercel.json, configura correctamente la secci√≥n "builds" para server.js');
console.log('3. En vercel.json, configura las rutas para manejar /api/* y /* correctamente');
console.log('4. Aseg√∫rate de que las variables de entorno est√©n configuradas en vercel.json o en el dashboard de Vercel');
console.log('5. Verifica que server.js exporte la aplicaci√≥n de manera adecuada para Vercel serverless functions'); 